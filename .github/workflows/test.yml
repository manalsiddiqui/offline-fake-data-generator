name: Test Offline Fake Data Generator

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce CI load
          - os: windows-latest
            python-version: '3.7'
          - os: macOS-latest  
            python-version: '3.7'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test core functionality
      run: |
        python -c "
        from fake_data_generator import FakeDataGenerator
        generator = FakeDataGenerator()
        persona = generator.generate_persona()
        assert persona['name']
        assert persona['email']
        print('✅ Core generation works')
        "

    - name: Test seeded generation
      run: |
        python -c "
        from fake_data_generator import FakeDataGenerator
        generator = FakeDataGenerator()
        p1 = generator.create_seeded_persona('test')
        p2 = generator.create_seeded_persona('test')
        assert p1['name'] == p2['name']
        print('✅ Seeded generation works')
        "

    - name: Test CLI
      run: |
        python cli.py generate --format json
        python cli.py seed "test-seed" --format json

    - name: Test persistence
      run: |
        python -c "
        from fake_data_generator import FakeDataGenerator
        generator = FakeDataGenerator()
        persona = generator.generate_persona()
        persona_id = generator.save_persona(persona)
        loaded = generator.load_persona(persona_id)
        assert loaded['name'] == persona['name']
        print('✅ Persistence works')
        "

    - name: Test export formats
      run: |
        python -c "
        from fake_data_generator import FakeDataGenerator
        generator = FakeDataGenerator()
        persona = generator.generate_persona()
        persona_id = generator.save_persona(persona)
        
        json_export = generator.export_persona(persona_id, 'json')
        yaml_export = generator.export_persona(persona_id, 'yaml')
        csv_export = generator.export_persona(persona_id, 'csv')
        
        assert json_export
        assert yaml_export
        assert csv_export
        print('✅ Export formats work')
        "

    - name: Run comprehensive demo
      run: python demo.py

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check formatting with black
      run: |
        black --check --diff . 